{"version":3,"sources":["Components/NumberField/NumberField.js","Components/CheckboxField/CheckboxField.js","Components/DropdownField/DropdownField.js","Components/HeatmapChart/HeatmapChart.js","Components/App.js","serviceWorker.js","index.js"],"names":["NumberField","props","label","value","onValueChanged","className","onChange","event","newValue","Number","target","e","CheckboxField","checked","onCheckedChanged","type","newState","DropdownField","options","selectedOption","onSelectedOptionChanged","newSelectedOption","map","option","HeatmapChart","columns","rows","wireframe","cursor","cursorInterpolation","legend","interpolation","dataGenerator","useState","undefined","chart","setChart","heatmap","setHeatmap","refLegendBox","useRef","useEffect","lightningChart","ChartXY","container","setTitleFillStyle","emptyFill","engine","layout","dispose","addHeatmapGridSeries","dataOrder","setFillStyle","PalettedFill","lookUpProperty","lut","LUT","units","interpolate","steps","color","ColorRGBA","dataGenerationCanceled","handleDataLoaded","data","invalidateIntensityValues","createWaterDropDataGenerator","setRows","setColumns","generate","then","createSpectrumDataGenerator","setSampleSize","setNumberOfSamples","toPromise","sample","setWireframeStyle","SolidLine","thickness","fillStyle","SolidFill","emptyLine","setPixelInterpolationMode","legendBox","addLegendBox","add","current","setAutoCursorMode","AutoCursorModes","snapToClosest","disabled","setCursorInterpolationEnabled","id","App","setWireframe","setCursor","setCursorInterpolation","setLegend","setInterpolation","setDataGenerator","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fed12b3e.chunk.js","sourcesContent":["import './NumberField.css'\r\n\r\nconst NumberField = (props) => {\r\n    const {\r\n        label,\r\n        value,\r\n        onValueChanged\r\n    } = props\r\n\r\n    return <div className='numberfield-container'>\r\n        {label}\r\n        <input\r\n            className='numberfield-input'\r\n            value={value}\r\n            onChange={(event) => {\r\n                try {\r\n                    const newValue = Number(event.target.value)\r\n                    if (newValue !== value) {\r\n                        onValueChanged(newValue)\r\n                    }\r\n                } catch (e) {}\r\n            }}\r\n        >\r\n        </input>\r\n    </div>\r\n}\r\n\r\nexport default NumberField\r\n","import './CheckboxField.css'\r\n\r\nconst CheckboxField = (props) => {\r\n    const {\r\n        label,\r\n        checked,\r\n        onCheckedChanged\r\n    } = props\r\n\r\n    return <div className='checkbox-container'>\r\n        {label}\r\n        <input\r\n            type='checkbox'\r\n            checked={checked}\r\n            onChange={(event) => {\r\n                const newState = event.target.checked\r\n                if (newState !== checked) {\r\n                    onCheckedChanged(newState)\r\n                }\r\n            }}\r\n        >\r\n        </input>\r\n    </div>\r\n}\r\n\r\nexport default CheckboxField\r\n","import './DropdownField.css'\r\n\r\nconst DropdownField = (props) => {\r\n    const {\r\n        label,\r\n        options,\r\n        selectedOption,\r\n        onSelectedOptionChanged,\r\n    } = props\r\n\r\n    return <div className='dropdownfield-container'>\r\n        {label}\r\n        <select\r\n            className='dropdownfield-input'\r\n            value={selectedOption}\r\n            onChange={(event) => {\r\n                const newSelectedOption = event.target.value\r\n                if (newSelectedOption !== selectedOption) {\r\n                    onSelectedOptionChanged(newSelectedOption)\r\n                }\r\n            }}\r\n        >\r\n            {options.map(option => \r\n                <option\r\n                    key={option}\r\n                    value={option}\r\n                >\r\n                    {option}\r\n                </option>    \r\n            )}\r\n        </select>\r\n    </div>\r\n}\r\n\r\nexport default DropdownField\r\n","import { lightningChart, emptyFill, SolidLine, ColorRGBA, emptyLine, SolidFill, AutoCursorModes, PalettedFill, LUT } from '@arction/lcjs'\r\nimport { createWaterDropDataGenerator, createSpectrumDataGenerator } from '@arction/xydata'\r\nimport React, { useRef, useEffect, useState } from 'react'\r\nimport './HeatmapChart.css'\r\n\r\nconst HeatmapChart = (props) => {\r\n    const {\r\n        columns,\r\n        rows,\r\n        wireframe,\r\n        cursor,\r\n        cursorInterpolation,\r\n        legend,\r\n        interpolation,\r\n        dataGenerator\r\n    } = props\r\n\r\n    const [chart, setChart] = useState(undefined)\r\n    const [heatmap, setHeatmap] = useState(undefined)\r\n    const refLegendBox = useRef(undefined)\r\n\r\n    // This effect is triggered only when the entire LC JS chart has to be reconstructed or initialized.\r\n    useEffect(() => {\r\n        const chart = lightningChart().ChartXY({\r\n            container: 'heatmapchart'\r\n        })\r\n            .setTitleFillStyle(emptyFill)\r\n\r\n        setChart(chart)\r\n\r\n        // Required for chart looking initially correct in React context.\r\n        chart.engine.layout()\r\n\r\n        // Return function that will destroy the chart completely.\r\n        return () => {\r\n            chart.dispose()\r\n            setChart(undefined)\r\n        }\r\n    }, [])\r\n\r\n    // This effect is triggered when the Heatmap Series has to be recreated.\r\n    useEffect(() => {\r\n        if (!chart) return\r\n\r\n        const heatmap = chart.addHeatmapGridSeries({\r\n            columns,\r\n            rows,\r\n            dataOrder: 'columns',\r\n        })\r\n            .setFillStyle(new PalettedFill({\r\n                lookUpProperty: 'value',\r\n                lut: new LUT({\r\n                    units: 'intensity',\r\n                    interpolate: false,\r\n                    steps: [\r\n                        { value: 0, color: ColorRGBA(255, 255, 0) },\r\n                        { value: 30, color: ColorRGBA(255, 204, 0) },\r\n                        { value: 45, color: ColorRGBA(255, 128, 0) },\r\n                        { value: 60, color: ColorRGBA(255, 0, 0) },\r\n                    ]\r\n                })\r\n            }))\r\n\r\n        setHeatmap(heatmap)\r\n\r\n        return () => {\r\n            heatmap.dispose()\r\n            setHeatmap(undefined)\r\n        }\r\n    }, [chart, columns, rows])\r\n\r\n    // This effect is triggered whenever data set has to be regenerated.\r\n    useEffect(() => {\r\n        let dataGenerationCanceled = false\r\n        const handleDataLoaded = (data) => {\r\n            if (dataGenerationCanceled) return\r\n            if (heatmap) {\r\n                heatmap.invalidateIntensityValues(data)\r\n            }\r\n        }\r\n        if (dataGenerator === 'waterdrops') {\r\n            createWaterDropDataGenerator()\r\n                .setRows(columns)\r\n                .setColumns(rows)\r\n                .generate()\r\n                .then(handleDataLoaded)\r\n        } else {\r\n            createSpectrumDataGenerator()\r\n                .setSampleSize(rows)\r\n                .setNumberOfSamples(columns)\r\n                .generate()\r\n                .toPromise()\r\n                .then(data => data.map(sample => sample.map(value => value * 100)))\r\n                .then(handleDataLoaded)\r\n        }\r\n        return () => {\r\n            dataGenerationCanceled = true\r\n        }\r\n    }, [heatmap, dataGenerator, columns, rows])\r\n\r\n    // This effect is triggered whenever heatmap wire frame style has to be reapplied.\r\n    useEffect(() => {\r\n        if (!heatmap) return\r\n\r\n        heatmap.setWireframeStyle(wireframe ? \r\n            new SolidLine({\r\n                thickness: 1,\r\n                fillStyle: new SolidFill({color: ColorRGBA(0, 0, 0, 255)})\r\n            }) :\r\n            emptyLine    \r\n        )\r\n    }, [heatmap, wireframe])\r\n\r\n    // This effect is triggered whenever heatmap interpolation has to be reapplied.\r\n    useEffect(() => {\r\n        if (!heatmap) return\r\n\r\n        heatmap.setPixelInterpolationMode(interpolation ? 'bilinear' : 'disabled')\r\n    }, [heatmap, interpolation])\r\n\r\n    // This effect is triggered whenever legend has to be updated.\r\n    useEffect(() => {\r\n        if (!chart) return\r\n\r\n        if (legend) {\r\n            const legendBox = chart.addLegendBox().add(chart)\r\n            refLegendBox.current = legendBox\r\n        }\r\n\r\n        return () => {\r\n            if (refLegendBox.current) {\r\n                refLegendBox.current.dispose()\r\n                refLegendBox.current = undefined\r\n            }\r\n        }\r\n    }, [chart, heatmap, legend])\r\n\r\n    // This effect is triggered whenever auto cursor mode is updated.\r\n    useEffect(() => {\r\n        if (!chart) return\r\n\r\n        chart.setAutoCursorMode(cursor ? AutoCursorModes.snapToClosest : AutoCursorModes.disabled)\r\n    }, [chart, cursor])\r\n\r\n    // This effect is triggered whenever auto cursor interpolation mode is updated.\r\n    useEffect(() => {\r\n        if (!heatmap) return\r\n\r\n        heatmap.setCursorInterpolationEnabled(cursorInterpolation)\r\n    }, [heatmap, cursorInterpolation])\r\n\r\n    return <div\r\n        id='heatmapchart'\r\n    ></div>\r\n}\r\n\r\nexport default HeatmapChart","import React, { useState } from 'react';\r\nimport './App.css'\r\nimport NumberField from './NumberField/NumberField';\r\nimport CheckboxField from './CheckboxField/CheckboxField';\r\nimport DropdownField from './DropdownField/DropdownField';\r\nimport HeatmapChart from './HeatmapChart/HeatmapChart'\r\n\r\n// - number field: columns\r\n// - number field: rows\r\n// - dropdown selection: data type \r\n// - checkbox: bilinear interpolation\r\n// - checkbox: cursor enabled\r\n// - checkbox: cursor interpolation enabled\r\n// - checkbox: legend enabled\r\n// - checkbox: wire frame enabled\r\n\r\nconst App = (props) => {\r\n    const [columns, setColumns] = useState(1000)\r\n    const [rows, setRows] = useState(1000)\r\n    const [wireframe, setWireframe] = useState(false)\r\n    const [cursor, setCursor] = useState(true)\r\n    const [cursorInterpolation, setCursorInterpolation] = useState(true)\r\n    const [legend, setLegend] = useState(false)\r\n    const [interpolation, setInterpolation] = useState(true)\r\n    const [dataGenerator, setDataGenerator] = useState('waterdrops')\r\n\r\n    return <div className='app-container'>\r\n        <div className='app-uiContainer'>\r\n            <div className='app-uiItemContainer'>\r\n                <NumberField\r\n                    label='Number of columns (X)'\r\n                    value={columns}\r\n                    onValueChanged={(value) => setColumns(value)}\r\n                />\r\n            </div>\r\n            <div className='app-uiItemContainer'>\r\n                <NumberField\r\n                    label='Number of rows (Y)'\r\n                    value={rows}\r\n                    onValueChanged={(value) => setRows(value)}\r\n                />\r\n            </div>\r\n            <div className='app-uiItemContainer'>\r\n                <DropdownField\r\n                    label='Data generator'\r\n                    options={['waterdrops', 'spectrum']}\r\n                    selectedOption={dataGenerator}\r\n                    onSelectedOptionChanged={(value) => setDataGenerator(value)}\r\n                />\r\n            </div>\r\n            <div className='app-uiItemContainer'>\r\n                <CheckboxField\r\n                    label='Wire frame enabled'\r\n                    checked={wireframe}\r\n                    onCheckedChanged={(checked) => setWireframe(checked)}\r\n                />\r\n            </div>\r\n            <div className='app-uiItemContainer'>\r\n                <CheckboxField\r\n                    label='Cursor enabled'\r\n                    checked={cursor}\r\n                    onCheckedChanged={(checked) => setCursor(checked)}\r\n                />\r\n            </div>\r\n            <div className='app-uiItemContainer'>\r\n                <CheckboxField\r\n                    label='Cursor interpolation enabled'\r\n                    checked={cursorInterpolation}\r\n                    onCheckedChanged={(checked) => setCursorInterpolation(checked)}\r\n                />\r\n            </div>\r\n            <div className='app-uiItemContainer'>\r\n                <CheckboxField\r\n                    label='Legend enabled'\r\n                    checked={legend}\r\n                    onCheckedChanged={(checked) => setLegend(checked)}\r\n                />\r\n            </div>\r\n            <div className='app-uiItemContainer'>\r\n                <CheckboxField\r\n                    label='Heatmap interpolation enabled'\r\n                    checked={interpolation}\r\n                    onCheckedChanged={(checked) => setInterpolation(checked)}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className='app-chartContainer'>\r\n            <HeatmapChart\r\n                columns={columns}\r\n                rows={rows}\r\n                wireframe={wireframe}\r\n                cursor={cursor}\r\n                cursorInterpolation={cursorInterpolation}\r\n                legend={legend}\r\n                interpolation={interpolation}\r\n                dataGenerator={dataGenerator}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}